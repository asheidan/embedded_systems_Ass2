\documentclass[a4paper,twoside,titlepage]{article}

%--- Packages -----------------------------------------------------------------
\usepackage{a4}
\usepackage[english]{babel}

\usepackage{rotating}

\usepackage[inner=2cm,top=2cm,outer=3cm,bottom=1cm,includehead,includefoot]{geometry}
\usepackage[latin1]{inputenc}
% \usepackage[utf8]{inputenc}
\usepackage{moreverb}
\usepackage{float}
\usepackage{graphicx}
%\usepackage{makeidx}
%\makeindex
% Don't forget to run makeindex and include \printindex
\usepackage{fancyhdr}
 \usepackage[colorlinks=true,linkcolor=black,urlcolor=black]{hyperref} % Reference by title

\setcounter{tocdepth}{2} % Only subsections in toc

%--- Definitions --------------------------------------------------------------

\def\author			{}
\def\course			{5EL011 VT10}
\def\coursename	    {Embedded Systems}
\def\delivery		{Project 2 Report}
\def\version		{1.0}
\def\trivialname	{Project 2}
\def\tutor			{}


% New output float
\floatstyle{boxed}
\newfloat{program}{thp}{lop}
\floatname{program}{Program}
\newfloat{output}{thp}{lop}
\floatname{output}{Output}

%\restylefloat{figure}

 \hypersetup{
 pdfauthor = {\author},
 pdftitle = {\trivialname{} - \delivery},
 pdfsubject = {\coursename},
 pdfkeywords = {umu, edu, c, avr}
 }


\newcommand{\HUGE}{\fontsize{36}{42}\selectfont{}}
\newcommand{\helvetica}{\fontfamily{phv}\selectfont}
\newcommand{\degree}{\ensuremath{^\circ}}
\pagestyle{fancy}
	\lhead[\coursename]{\today}
	\chead[\textsc{\trivialname~- \delivery}]{\textsc{\trivialname~- \delivery}}
	\rhead[\today]{\course}
	
	\lfoot[\thepage]{\author}
	\cfoot[]{}
	\rfoot[\author]{\thepage}
	
	\renewcommand{\headrulewidth}{0.4pt} 
	\renewcommand{\footrulewidth}{0.4pt}

%------------------------------------------------------------------------------
\begin{document}
\pagestyle{empty}
%--- Titlepage ----------------------------------------------------------------
\begin{titlepage}
	{
	\helvetica
	\begin{flushright}
		\small \coursename{} \course\\
	\end{flushright}
	\begin{center}
		\LARGE \trivialname\\
		\HUGE { \textbf{\delivery}} \\
		\small \textbf{\author}\\
		\normalsize {
			Emil Eriksson (\href{mailto:c07een@cs.umu.se}{\texttt{c07een@cs.umu.se}}) \\
			Rickard Westerlund (\href{mailto:c07rwd@cs.umu.se}{\texttt{c07rwd@cs.umu.se}})
    		}
	\end{center}
	\vfill
	\begin{flushright}
		\subsection*{Examinator}
		Nils-Erik Eriksson (\href{mailto: nilserik.eriksson@tfe.umu.se}{nilserik.eriksson@tfe.umu.se})
	\end{flushright}
	}
\end{titlepage}

\pagestyle{fancy}
\pagenumbering{roman}
%--- Abstract -----------------------------------------------------------------
\section*{Summary}
	
	This report describes an implmentation of a data collection unit that stores
	temperatures read in intervals of one second and stored on an MMC. This data
	was planned to downloadable over LAN but due to problems getting it to work
	transmitting it using RS232 was done instead.

\clearpage
%--- Table of contents --------------------------------------------------------
\tableofcontents
\clearpage
\newpage

%--- Document -----------------------------------------------------------------
\pagenumbering{arabic}

\section{Introduction}
	This project aims to create a data collection unit that continously collects
	data from a set of sensor at regular intervals that is stored on an MMC that
	can be downloaded from over a LAN connection.

\section{Materials and Methods}
	\subsection{Build environment}

		When it was decided to use \nameref{sw:procyon}, maintaining the steps to build the software in WinAVR became more and more complicated.
		In an effort to keep using the library without the hassle of maintaining \nameref{sw:procyon}, a switch to a more open buildsystem was made.
		\begin{description}
			\item[AVR tool-chain] ~\\
			This is the same tool-chain ({\tt gcc}, {\tt ld} and so on) used for compilation by WinAVR but instead compiled on, in this case, Mac OS X.

			\item[Avrdude] ~\\
			An open source programmer for the AVR processors.
			Is avaliable for download from the homepage on \url{http://savannah.nongnu.org/projects/avrdude}.
			
			\item[SCons] ~\\
			A tool, much like Make, but intelligent, implemented in python (more information on \url{http://www.scons.org/}). The big difference between Make and SCons is the automatic parsing of source-files to keep check of dependencies.
		\end{description}

		As SCons doesn't have support for cross-compiling as standard, a small tool-library was written for AVR and Avrdude. This tool-library is available as part of the source.

		% TODO: det här ska nog till diskussion
		The use of a non-standard build environment led to some strange problems. The version of {\tt gcc} used did report an error if the target processor wasn't given as argument when compiling the object-files. But no error or warning was shown when this flag was forgotten in the linking-stage.
		This led to some very strange bugs which in the end was contributed to sections overwriting each other and therefore led to the processor restarting when overwritten functions were called.
		In the end this was found and the flag was added to the linking stage.

	\subsection{Hardware}
		\subsubsection{Microcontroller}
		\subsubsection{Memory card}

			Memory cards are read using a simple card holder that is connected to the SPI bus on {\tt PORTB} of the micrcontroller and receives cable select from {\tt PORTA}\ref{fig:wiring-diagram}.

		\subsubsection{LM74}

			LM74 is a temperature sensor using an SPI-interface to transmit temperature readings formatted as a 16-bit fixed-point number along with control codes. This sensor is used to collect and store data from continously.

			The sensor is connected on the {\tt PORTB} SPI bus of the microcontroller and gets its cable select signal from {\tt PORTA} as well\ref{fig:wiring-diagram}.

		\subsubsection{ENJ28J60}
			\label{hw:enc28j60}
			% TODO: Emil

			The ENC28J60 is a stand-alone ethernet controller with SPI-interface. As seen in \autoref{fig:wiring-diagram} (\pagename{} \pageref{fig:wiring-diagram}) the controller is attached to the SPI-bus of the micro controller and has chip select connected to {\tt PORTA}.
			
	\subsection{Software}
		\subsubsection{Procyon}
			\label{sw:procyon}
			% TODO: Emil

			Procyon is a library written for Atmel's AVR Processors. This looked very promising in the beginning of the project, but as will be clear later on in this section, much of the troubles could have been avoided by using a different library or writing some of the functionality implemented in Procyon from scratch.

			% TODO: Move this paragraph to introduction? Or summary?
			Since this report isn't an evaluation of the Procyon library the shortcomings of this software won't be discussed in depth but just mentioned in passing.

			\begin{itemize}
				\item There is no list available over which processors are supported.

				\item The latest version found is from late 2006 (29th October).\\
				This in itself isn't a problem but should have served as a warning. The project seems to be abandoned by it's author and no one seems to have picked up the torch and updated the source since then.

				\item The documentation of the library consists of comments in the headers.\\
				In some cases these are great and makes the modules a breeze to use and interact with. In other, more common cases, all that is available are the names and parameters of the functions. No overall view is available over used interrupts, global values or buffers. This makes the library, consisting of around 21 000 lines of code (not including headers or examples) not very developer-friendly.

				\item Some of the implementations doesn't compile.\\
				This is because they rely on registers not available. 
			\end{itemize}

			All in all probably around half the time of the project has been used by various problems related to the use, compilation or implementation of this library.

			Procyon shouldn't be viewed as a library, ready for use. But rather as a great collection of examples of how to interact with different external devices. If that had been clear from the beginning of the project much time could have been used in areas which the final product would have profited from.

			The modules finally used in the final product was functionality for Usart, SPI, MMC.
			% TODO: Har jag glömt någon del?

		\subsubsection{Data download}
			
			From the beginning the intention was to implement networking via the ENC28J60-driver and network stack implemented by \nameref{sw:procyon} and allow the user to download the collected data that way.
			But as time ran out due to the problems discussed in \autoref{sw:procyon}, this support was replaced by a serial interface via the Usart.

			When the user downloads data, each sector is read from the MMC-card and then sent via the USART. When the last used sector is sent the software goes back to collecting data from the sensors.

		\subsubsection{Memory card}

			Memory card are read using the routines from the Procyon library.
			The cards have their own format with a configuration sector at the beginning of the card and following sectors store data. In the configuration sector the version number for the software as well as the last sector with data is stored along with a checksum. A card will be reformatted if this checksum doesn't match, the version number is different from the current or if the card is filled.

			Data is stored as plain text with a newline separating readings. Different readings are separated with the tab character.

		\subsubsection{LM74}

			To get readings from the LM74 sensor, 16-bit integers are read until a valid temperature representation is given. This is needed as the LM74 sends control information when it is woken up. The temperature is afterwards formatted in a readable way, and also rounded up to the first decimal.

		\subsubsection{USART}

			Communication over USART is done by sending a single-byte command described as follows and then data is sent back from the microcontroller.
			\begin{description}
				\item[{\tt i}] Displays information about the card, such as verion number, current end sector, total amount of sectors and the size of a sector.
				\item[{\tt d}] Downloads all the data from the data sectors.
				\item[{\tt r}] Formats the card.
				\item[{\tt m}] Reinitializes a card, used when changing cards.
				\item[{\tt h}] Displays a help text describing all commands. Also sent when an unrecognized character is received.
			\end{description}

\section{Results}
	% TODO: Emil

\section{Limitations}
	\begin{description}
		\item[Downloading large files]
		\item[Card information not updated]
	\end{description}
\section{Discussion}

%referenslista
%  \bibliographystyle{plain}
%  \bibliography{plan}

    %%%%%%%%%%%%%%%% bilagor %%%%%%%%%%%%%%%%
    \clearpage
    \appendix
	 % TODO: Emil exporterar kopplingsdiagram
	\section{Wiring Diagram}\label{wiring-diagram}
	\begin{figure}[!htp]
        \centering
        %\includegraphics[width=\textwidth]{kopplingsschema.png}
        \caption{Wiring diagram}
        \label{fig:wiring-diagram}
    \end{figure}

	\section{Activity Diagram}\label{activity-diagram}
	\begin{figure}[!htp]
        \centering
        %\includegraphics[width=\textwidth]{aktivitetsdiagram.png}
        \caption{Activity diagram showing how the program operates.}
        \label{fig:activity-diagram}
    \end{figure}

\end{document}
